name: GridSynapse CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy black isort
          pip install -r api/requirements.txt
          pip install -r solver/requirements.txt
      
      - name: Run Black formatter check
        run: black --check api/ solver/ agents/
      
      - name: Run isort import checker
        run: isort --check-only api/ solver/ agents/
      
      - name: Run Ruff linter
        run: ruff check api/ solver/ agents/
      
      - name: Run MyPy type checker
        run: mypy api/ solver/ --ignore-missing-imports

  # Unit Tests
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run API tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          REDIS_URL: redis://localhost:6379
        run: |
          cd api
          pytest tests/ -v --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          flags: api

  # Test Solver
  test-solver:
    name: Test Solver
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r solver/requirements.txt
          pip install pytest pytest-cov
      
      - name: Run solver tests
        run: |
          cd solver
          pytest tests/ -v --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./solver/coverage.xml
          flags: solver

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r api/ solver/ -f json -o bandit-report.json
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-api, test-solver]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: ${{ github.event_name == 'push' }}
          tags: |
            ghcr.io/${{ github.repository }}/api:latest
            ghcr.io/${{ github.repository }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Solver image
        uses: docker/build-push-action@v4
        with:
          context: ./solver
          push: ${{ github.event_name == 'push' }}
          tags: |
            ghcr.io/${{ github.repository }}/solver:latest
            ghcr.io/${{ github.repository }}/solver:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      
      - name: Start Minikube
        uses: medyagh/setup-minikube@master
        with:
          kubernetes-version: v1.28.0
      
      - name: Deploy to Minikube
        run: |
          kubectl apply -k k8s/overlays/test
          kubectl wait --for=condition=ready pod -l app=gridsynapse-api --timeout=300s
      
      - name: Run integration tests
        run: |
          pip install pytest requests
          kubectl port-forward svc/gridsynapse-api 8000:8000 &
          sleep 5
          pytest tests/integration/ -v

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging cluster
        run: |
          # In production, this would deploy to your staging K8s cluster
          echo "Deploying to staging..."
          # kubectl apply -k k8s/overlays/staging

  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
      - uses: actions/checkout@v3
      
      - name: Extract version
        id: version
        run: echo "version=$(grep version api/pyproject.toml | cut -d'"' -f2)" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            GridSynapse MVP Release
            
            ## What's Changed
            See commit history for details.
            
            ## Docker Images
            - API: `ghcr.io/${{ github.repository }}/api:v${{ steps.version.outputs.version }}`
            - Solver: `ghcr.io/${{ github.repository }}/solver:v${{ steps.version.outputs.version }}`
          draft: false
          prerelease: false